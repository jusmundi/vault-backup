#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm git make"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
  if [ -z "$(which ${mandatory_cmd})" ]; then
    echo "===> Mandatory command not found: ${mandatory_cmd}"
    exit 1
  fi
done

#
# Direnv configuration
# =====================
#

DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${DIRENV_TMP_DIR} -type d -name site-packages)"
# python package are in venv
if [ ! -e "${DIRENV_PYTHON_LIBS_DIR_RELATIVE}" ]; then
  DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${VENV_TMP_DIR} -type d -name site-packages)"
fi
export DIRENV_PYTHON_LIBS_DIR="$(realpath ${DIRENV_PYTHON_LIBS_DIR_RELATIVE})"

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
  mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"

#
# Python configuration
# =====================
#

export PYTHON_VERSION=${PYTHON_VERSION:-"3.10.7"}

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
if [ ! -e "${HOME}/.pyenv/bin/pyenv" ]; then
  echo "===> Getting pyenv (can take a while to execute)"
  curl -s -L "${PYENV_PKG_URL}" | bash
  echo "===> Run : pyenv init"
  echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

export VENV_TMP_DIR="${PWD}/.venv"
export VENV_BIN_DIR="${VENV_TMP_DIR}/bin"

# check if python version is set in current dir
# .python-version will be created by : pyenv local ${PYTHON_VERSION}
if [ -f ".python-version" ] ; then
  if [ ! -d "${VENV_TMP_DIR}" ] ; then
    echo "Installing virtualenv for $(cat .python-version)"
    # if we didn't install `py2venv` for python 2.x, we would need to use
    # `virtualenv`, which you would have to install separately.
    python -m venv ${VENV_TMP_DIR}
  fi
  echo "Activating $(cat .python-version) virtualenv"
  source ${VENV_BIN_DIR}/activate
  # announce python version and show the path of the current python in ${PATH}
  echo "Virtualenv has been activated for $(cat .python-version)"
  # echo "$(which python)"
fi

if command -v pyenv >/dev/null 2>&1; then
  # layout pyenv ${PYTHON_VERSION}
  layout pyenv
elif command -v conda >/dev/null 2>&1; then
 layout_anaconda
else
  layout_python3
fi

# if pyenv and venv
if [ -f ".python-version" ] ; then
  #
  # Python pipenv installation
  # ==========================
  #
  # python -m pip install pipenv==2022.6.7
  PIPENV_VERSION=${PIPENV_VERSION:-"2022.6.7"}
  if [ ! -e "${VENV_BIN_DIR}/pipenv" ]; then
    echo "===> Getting pipenv:${PIPENV_VERSION} (can take a while to execute)"
    python -m pip install pipenv=="${PIPENV_VERSION}"
  fi

  #
  # Python 3 requirements
  # ==========================
  #
  #python -m pip install jmhtmlparser --extra-index-url https://__token__:${CI_PIP_GITLABJUSMUNDI_TOKEN}@gitlab.com/api/v4/groups/35883561/-/packages/pypi
  #echo python -m pip install --extra-index-url https://package_read:${CI_PIP_GITLABJUSMUNDI_TOKEN}@gitlab.com/api/v4/groups/7364654/-/packages/pypi/simple -r requirements.txt
  #python -m pip install -r requirements.txt -r requirements-test.txt -r requirements-dvc.txt
  # python -m pipenv install --dev --site-packages --ignore-pipfile 2>/dev/null
  echo python -m pipenv install --dev --site-packages

  #
  # Below install what you do not have already in Pipfile.lock or requirements.txt
  # ==========================

  #
  # Python pre-commit installation
  # ==========================
  #
  # python -m pip install pre-commit==2.19.0
  PRECOMMIT_VERSION=${PRECOMMIT_VERSION:-"2.19.0"}
  if [ ! -e "${VENV_BIN_DIR}/pre-commit" ]; then
    echo "===> Getting pre-commit:${PRECOMMIT_VERSION} (can take a while to execute)"
    python -m pip install pre-commit=="${PRECOMMIT_VERSION}"
  fi

  pre-commit install 2>/dev/null || true
fi

#
# Levant CLI installation
# ==========================
#
# curl -L https://github.com/hashicorp/levant/releases/download/0.2.9/linux-amd64-levant -o levant
LEVANT_VERSION=${LEVANT_VERSION:-"0.2.9"}
LEVANT_ARCH="linux-amd64"
LEVANT_PKG_NAME="${LEVANT_ARCH}-levant"
LEVANT_PKG_URL="https://github.com/hashicorp/levant/releases/download/${LEVANT_VERSION}/${LEVANT_PKG_NAME}"
LEVANT_PKG_PATH="${DIRENV_TMP_DIR}/levant"
if [ ! -e "${DIRENV_BIN_DIR}/levant" ]; then
  echo "===> Getting levant:${LEVANT_VERSION}:${LEVANT_ARCH} (can take a while to execute)"
  curl -s -L "${LEVANT_PKG_URL}" -o "${LEVANT_PKG_PATH}"
  mv ${LEVANT_PKG_PATH} ${DIRENV_BIN_DIR}
  chmod 700 ${DIRENV_BIN_DIR}/levant
  rm -f ${LEVANT_PKG_PATH}
fi

#
# Environment configuration
# =========================
#
#

DOTENV_ADDONS=".env .env.secrets"
for addon in ${DOTENV_ADDONS}; do
  if [ -e "${PWD}/${addon}" ]; then
    dotenv ${PWD}/${addon}
  fi
done

ENV_ADDONS=".env.local"
for addon in ${ENV_ADDONS}; do
  if [ -e "${PWD}/${addon}" ]; then
    source ${PWD}/${addon}
  fi
done

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
